---
resource_reference: true
resources_common_guards: true
resources_common_notification: true
resources_common_properties: true
resource: dsc_resource
resource_description_list:
- shortcode: resources_common_powershell.md
- shortcode: resources_common_powershell_dsc.md
- markdown: The dsc_resource resource allows any DSC resource to be used in a recipe,
    as well as any custom resources that have been added to your Windows PowerShell
    environment. Microsoft frequently adds new resources to the DSC resource collection.
- warning:
  markdown: "Using the **dsc_resource** has the following requirements:\n\n-   Windows\
    \ Management Framework (WMF) 5.0 (or higher)\n-  The **dsc_resource** resource can only\
    \ use binary- or script-based\n    resources. Composite DSC resources may not\
    \ be used.\n\n    This is because composite resources aren't \"real\" resources\
    \ from the\n    perspective of the Local Configuration Manager (LCM). Composite\n\
    \    resources are used by the \"configuration\" keyword from the\n    `PSDesiredStateConfiguration`\
    \ module, and then evaluated in that\n    context. When using DSC to create\
    \ the configuration document (the\n    Managed Object Framework (MOF) file)\
    \ from the configuration command,\n    the composite resource is evaluated.\
    \ Any individual resources from\n    that composite resource are written into\
    \ the Managed Object\n    Framework (MOF) document. As far as the Local Configuration\
    \ Manager\n    (LCM) is concerned, there is no such thing as a composite resource.\n\
    \    Unless that changes, the **dsc_resource** resource and/or\n    `Invoke-DscResource`\
    \ command cannot directly use them."
syntax_description: "A **dsc_resource** resource block allows DSC resources to be\
  \ used in a\nChef recipe. For example, the DSC `Archive` resource:\n\n```powershell\n\
  Archive ExampleArchive {\n  Ensure = \"Present\"\n  Path = \"C:\\Users\\Public\\\
  Documents\\example.zip\"\n  Destination = \"C:\\Users\\Public\\Documents\\ExtractionPath\"\
  \n}\n```\n\nand then the same **dsc_resource** with Chef:\n\n```ruby\ndsc_resource\
  \ 'example' do\n   resource :archive\n   property :ensure, 'Present'\n   property\
  \ :path, \"C:\\Users\\Public\\Documents\\example.zip\"\n   property :destination,\
  \ \"C:\\Users\\Public\\Documents\\ExtractionPath\"\n end```"
resource_new_in: '12.2'
syntax_full_code_block: |-
  dsc_resource 'name' do
    module_version      String
    reboot_action       Symbol # default value: :nothing
    timeout             Integer
    action              Symbol # defaults to :run if not specified
  end
syntax_properties_list:
syntax_full_properties_list:
- "`dsc_resource` is the resource."
- "`name` is the name given to the resource block."
- "`action` identifies which steps Chef Infra Client will take to bring the node into
  the desired state."
- "`module_version`, `reboot_action`, and `timeout` are the properties available to
  this resource."
actions_list:
  :nothing:
    shortcode: resources_common_actions_nothing.md
  :run:
    markdown: " (default)"
properties_list:
- property: module_name
  ruby_type: String
  required: false
  description_list:
  - markdown: 'The name of the module from which a DSC resource originates. If this
      property is not specified, it will be inferred.'
- property: module_version
  ruby_type: String
  required: false
  new_in: '12.21'
  description_list:
  - markdown: The version number of the module to use. PowerShell 5.0.10018.0 (or
      higher) supports having multiple versions of a module installed. This should
      be specified along with the `module_name` property.
- property: property
  ruby_type: String
  description_list:
  - markdown: |-
      A property from a Desired State Configuration (DSC) resource.
      Use this property multiple times, one for each property in the Desired State Configuration (DSC) resource.
      The format for this property must follow `property :dsc_property_name, "property_value"` for each DSC property added to the resource block.
      The `:dsc_property_name` must be a symbol.

      Use the following Ruby types to define property_value:

      | **Ruby**                              | **PowerShell** |
      |---------------------------------------|----------------|
      | `:array`                              | `Object[]`     |
      | `Chef::Util::Powershell:PSCredential` | `PSCredential` |
      | `False`                               | `bool($false)` |
      | `Fixnum`                              | `Integer`      |
      | `Float`                               | `Double`       |
      | `Hash`                                | `Hashtable`    |
      | `True`                                | `bool($true)`  |

      These are converted into the corresponding Windows PowerShell type during a Chef Infra Client run.

- property: reboot_action
  ruby_type: Symbol
  required: false
  default_value: ":nothing"
  new_in: '12.6'
  allowed_values: ":nothing, :reboot_now, :request_reboot"
  description_list:
  - markdown: Use to request an immediate reboot or to queue a reboot using the :reboot_now
      (immediate reboot) or :request_reboot (queued reboot) actions built into the
      reboot resource.
- property: resource
  ruby_type: Symbol
  required: false
  description_list:
  - markdown: 'The name of the DSC resource. This value is case-insensitive and

      must be a symbol that matches the name of the DSC resource.


      For built-in DSC resources, use the following values:


      <table>

      <colgroup>

      <col style="width: 50%" />

      <col style="width: 50%" />

      </colgroup>

      <thead>

      <tr class="header">

      <th>Value</th>

      <th>Description</th>

      </tr>

      </thead>

      <tbody>

      <tr>

      <td><code>:archive</code></td>

      <td>Use to <a href="https://docs.microsoft.com/en-us/powershell/dsc/reference/resources/windows/archiveresource">unpack
      archive (.zip) files</a>.</td>

      </tr>

      <tr>

      <td><code>:environment</code></td>

      <td>Use to <a href="https://docs.microsoft.com/en-us/powershell/dsc/reference/resources/windows/environmentresource">manage
      system environment variables</a>.</td>

      </tr>

      <tr>

      <td><code>:file</code></td>

      <td>Use to <a href="https://docs.microsoft.com/en-us/powershell/dsc/reference/resources/windows/fileresource">manage
      files and directories</a>.</td>

      </tr>

      <tr>

      <td><code>:group</code></td>

      <td>Use to <a href="https://docs.microsoft.com/en-us/powershell/dsc/reference/resources/windows/groupresource">manage
      local groups</a>.</td>

      </tr>

      <tr>

      <td><code>:log</code></td>

      <td>Use to <a href="https://docs.microsoft.com/en-us/powershell/dsc/reference/resources/windows/logresource">log
      configuration messages</a>.</td>

      </tr>

      <tr>

      <td><code>:package</code></td>

      <td>Use to <a href="https://docs.microsoft.com/en-us/powershell/dsc/reference/resources/windows/packageresource">install
      and manage packages</a>.</td>

      </tr>

      <tr>

      <td><code>:registry</code></td>

      <td>Use to <a href="https://docs.microsoft.com/en-us/powershell/dsc/reference/resources/windows/registryresource">manage
      registry keys and registry key values</a>.</td>

      </tr>

      <tr>

      <td><code>:script</code></td>

      <td>Use to <a href="https://docs.microsoft.com/en-us/powershell/dsc/reference/resources/windows/scriptresource">run
      PowerShell script blocks</a>.</td>

      </tr>

      <tr>

      <td><code>:service</code></td>

      <td>Use to <a href="https://docs.microsoft.com/en-us/powershell/dsc/reference/resources/windows/serviceresource">manage
      services</a>.</td>

      </tr>

      <tr>

      <td><code>:user</code></td>

      <td>Use to <a href="https://docs.microsoft.com/en-us/powershell/dsc/reference/resources/windows/userresource">manage
      local user accounts</a>.</td>

      </tr>

      <tr>

      <td><code>:windowsfeature</code></td>

      <td>Use to <a href="https://docs.microsoft.com/en-us/powershell/dsc/reference/resources/windows/windowsfeatureresource">add
      or remove Windows features and roles</a>.</td>

      </tr>

      <tr>

      <td><code>:windowsoptionalfeature</code></td>

      <td>Use to configure Microsoft Windows optional features.</td>

      </tr>

      <tr>

      <td><code>:windowsprocess</code></td>

      <td>Use to <a href="https://docs.microsoft.com/en-us/powershell/dsc/reference/resources/windows/windowsprocessresource">configure
      Windows processes</a>.</td>

      </tr>

      </tbody>

      </table>


      Any DSC resource may be used in a Chef recipe. For example, the DSC

      Resource Kit contains resources for [configuring Active Directory

      components](http://www.powershellgallery.com/packages/xActiveDirectory/2.8.0.0),

      such as `xADDomain`, `xADDomainController`, and `xADUser`. Assuming

      that these resources are available to Chef Infra Client, the

      corresponding values for the `resource` attribute would be:

      `:xADDomain`, `:xADDomainController`, and `xADUser`.'
- property: timeout
  ruby_type: Integer
  required: false
  description_list:
  - markdown: 'The amount of time (in seconds) a command is to wait before timing

      out.'
examples: "
  Open a Zip file\n\n  ```ruby\n  dsc_resource 'example' do\n    \
  \ resource :archive\n     property :ensure, 'Present'\n     property :path, 'C:\\\
  Users\\Public\\Documents\\example.zip'\n     property :destination, 'C:\\Users\\\
  Public\\Documents\\ExtractionPath'\n   end\n  ```\n\n  Manage users and groups\n\
  \n  ```ruby\n  dsc_resource 'demogroupadd' do\n    resource :group\n    property\
  \ :groupname, 'demo1'\n    property :ensure, 'present'\n  end\n\n  dsc_resource\
  \ 'useradd' do\n    resource :user\n    property :username, 'Foobar1'\n    property\
  \ :fullname, 'Foobar1'\n    property :password, ps_credential('P@assword!')\n  \
  \  property :ensure, 'present'\n  end\n\n  dsc_resource 'AddFoobar1ToUsers' do\n\
  \    resource :Group\n    property :GroupName, 'demo1'\n    property :MembersToInclude,\
  \ ['Foobar1']\n  end\n  ```\n\n  Create and register a windows service\n\n  The\
  \ following example creates a windows service, defines it's execution\n  path, and\
  \ prevents windows from starting the service in case the\n  executable is not at\
  \ the defined location:\n\n  ```ruby\n  dsc_resource 'NAME' do\n    resource :service\n\
  \    property :name, 'NAME'\n    property :startuptype, 'Disabled'\n    property\
  \ :path, 'D:\\\\Sites\\\\Site_name\\file_to_run.exe'\n    property :ensure, 'Present'\n\
  \    property :state, 'Stopped'\n  end\n  ```\n\n  Create a test message queue\n\
  \n  The following example creates a file on a node (based on one that is\n  located\
  \ in a cookbook), unpacks the `MessageQueue.zip` Windows\n  PowerShell module, and\
  \ then uses the **dsc_resource** to ensure that\n  Message Queuing (MSMQ) sub-features\
  \ are installed, a test queue is\n  created, and that permissions are set on the\
  \ test queue:\n\n  ```ruby\n  cookbook_file 'cMessageQueue.zip' do\n    path \"\
  #{Chef::Config[:file_cache_path]}\\\\MessageQueue.zip\"\n    action :create_if_missing\n\
  \  end\n\n  windows_zipfile \"#{ENV['PROGRAMW6432']}\\\\WindowsPowerShell\\\\Modules\"\
  \ do\n    source \"#{Chef::Config[:file_cache_path]}\\\\MessageQueue.zip\"\n   \
  \ action :unzip\n  end\n\n  dsc_resource 'install-sub-features' do\n    resource\
  \ :windowsfeature\n    property :ensure, 'Present'\n    property :name, 'msmq'\n\
  \    property :IncludeAllSubFeature, true\n  end\n\n  dsc_resource 'create-test-queue'\
  \ do\n    resource :cPrivateMsmqQueue\n    property :ensure, 'Present'\n    property\
  \ :name, 'Test_Queue'\n  end\n\n  dsc_resource 'set-permissions' do\n    resource\
  \ :cPrivateMsmqQueuePermissions\n    property :ensure, 'Present'\n    property :name,\
  \ 'Test_Queue_Permissions'\n    property :QueueNames, 'Test_Queue'\n    property\
  \ :ReadUsers, node['msmq']['read_user']\n  end\n  ```\n\n  Example to show usage\
  \ of module properties\n\n  ```ruby\n  dsc_resource 'test-cluster' do\n    resource\
  \ :xCluster\n    module_name 'xFailOverCluster'\n    module_version '1.6.0.0'\n\
  \    property :name, 'TestCluster'\n    property :staticipaddress, '10.0.0.3'\n\
  \    property :domainadministratorcredential, ps_credential('abcd')\n  end\n  ```\n"
