---
resource_reference: true
resource: ruby_block
resource_description_list:
- markdown: Use the **ruby_block** resource to execute Ruby code during a Chef Infra
    Client run. Ruby code in the `ruby_block` resource is evaluated with other resources
    during convergence, whereas Ruby code outside of a `ruby_block` resource is evaluated
    before other resources, as the recipe is compiled.
syntax_description: "A **ruby_block** resource block executes a block of arbitrary\
  \ Ruby\ncode. For example, to reload the client.rb file during a Chef Infra\nClient\
  \ run:\n\n```ruby\nruby_block 'reload_client_config' do\n  block do\n    Chef::Config.from_file(\"\
  /etc/chef/client.rb\")\n  end\n  action :run\nend\n```"
syntax_full_code_block: |-
  ruby_block 'name' do
    block           Block
    block_name      String # default value: 'name' unless specified
    action          Symbol # defaults to :run if not specified
  end
syntax_properties_list:
syntax_full_properties_list:
- '`ruby_block` is the resource.'
- '`name` is the name given to the resource block.'
- '`block` is the block of Ruby code to be executed.'
- '`action` identifies which steps Chef Infra Client will take to bring the node into
  the desired state.'
- '`block` and `block_name` are properties of this resource, with the Ruby type shown.
  See "Properties" section below for more information about all of the properties
  that may be used with this resource.'
actions_list:
  :create:
    markdown: The same as `:run`.
  :nothing:
    shortcode: resources_common_actions_nothing.md
  :run:
    markdown: "Run a Ruby block. (default)"
properties_list:
- property: block
  ruby_type: block
  required: false
  description_list:
  - markdown: A block of Ruby code.
- property: block_name
  ruby_type: String
  required: false
  default_value: The resource block's name
  description_list:
  - markdown: 'The name of the Ruby block. Default value: the `name` of the

      resource block. See "Syntax" section above for more information.'
examples: |
  **Reload Chef Infra Client configuration data**

  ```ruby
  ruby_block 'reload_client_config' do
    block do
      Chef::Config.from_file('/etc/chef/client.rb')
    end
    action :run
  end
  ```

  **Run a block on a particular platform**

  The following example shows how an if statement can be used with the `windows?` method in the Chef Infra Language to run code specific to Microsoft Windows. The code is defined using the ruby_block resource:

  ```ruby
  if windows?
    ruby_block 'copy libmysql.dll into ruby path' do
      block do
        require 'fileutils'
        FileUtils.cp "#{node['mysql']['client']['lib_dir']}\\libmysql.dll",
          node['mysql']['client']['ruby_dir']
      end
      not_if { ::File.exist?("#{node['mysql']['client']['ruby_dir']}\\libmysql.dll") }
    end
  end
  ```

  **Stash a file in a data bag**

  The following example shows how to use the ruby_block resource to stash a BitTorrent file in a data bag so that it can be distributed to nodes in the organization.

  ```ruby
  ruby_block 'share the torrent file' do
    block do
      f = File.open(node['bittorrent']['torrent'],'rb')
      #read the .torrent file and base64 encode it
      enc = Base64.encode64(f.read)
      data = {
        'id'=>bittorrent_item_id(node['bittorrent']['file']),
        'seed'=>node.ipaddress,
        'torrent'=>enc
      }
      item = Chef::DataBagItem.new
      item.data_bag('bittorrent')
      item.raw_data = data
      item.save
    end
    action :nothing
    subscribes :create, "bittorrent_torrent[#{node['bittorrent']['torrent']}]", :immediately
  end
  ```

  **Update the /etc/hosts file**

  The following example shows how the ruby_block resource can be used to update the /etc/hosts file:

  ```ruby
  ruby_block 'edit etc hosts' do
    block do
      rc = Chef::Util::FileEdit.new('/etc/hosts')
      rc.search_file_replace_line(/^127\.0\.0\.1 localhost$/,
        '127.0.0.1 #{new_fqdn} #{new_hostname} localhost')
      rc.write_file
    end
  end
  ```

  **Set environment variables**

  The following example shows how to use variables within a Ruby block to set environment variables using rbenv.

  ```ruby
  node.override[:rbenv][:root] = rbenv_root
  node.override[:ruby_build][:bin_path] = rbenv_binary_path

  ruby_block 'initialize' do
    block do
      ENV['RBENV_ROOT'] = node[:rbenv][:root]
      ENV['PATH'] = "#{node[:rbenv][:root]}/bin:#{node[:ruby_build][:bin_path]}:#{ENV['PATH']}"
    end
  end
  ```

  **Call methods in a gem**

  The following example shows how to call methods in gems not shipped in Chef Infra Client

  ```ruby
  chef_gem 'mongodb'

  ruby_block 'config_replicaset' do
    block do
      MongoDB.configure_replicaset(node, replicaset_name, rs_nodes)
    end
    action :run
  end
  ```
