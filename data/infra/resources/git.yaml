---
resource_reference: true
resources_common_guards: true
resources_common_notification: true
resources_common_properties: true
resource: git
resource_description_list:
- markdown: Use the **git** resource to manage source control resources that exist
    in a git repository. git version 1.6.5 (or higher) is required to use all of the
    functionality in the git resource.
syntax_description: "A **git** resource block manages source control resources that\
  \ exist in\na git repository:\n\n```ruby\ngit \"#{Chef::Config[:file_cache_path]}/app_name\"\
  \ do\n  repository node[:app_name][:git_repository]\n  revision node[:app_name][:git_revision]\n\
  \  action :sync\nend\n```"
syntax_full_code_block: |-
  git 'name' do
    additional_remotes      Hash
    checkout_branch         String
    depth                   Integer
    destination             String # default value: 'name' unless specified
    enable_checkout         true, false # default value: true
    enable_submodules       true, false # default value: false
    environment             Hash
    group                   String, Integer
    remote                  String # default value: "origin"
    repository              String
    revision                String # default value: "HEAD"
    ssh_wrapper             String
    timeout                 Integer
    user                    String, Integer
    action                  Symbol # defaults to :sync if not specified
  end
syntax_full_properties_list:
- "`git` is the resource."
- "`name` is the name given to the resource block."
- "`action` identifies which steps Chef Infra Client will take to bring the node into
  the desired state."
- "`additional_remotes`, `checkout_branch`, `depth`, `destination`, `enable_checkout`,
  `enable_submodules`, `environment`, `group`, `remote`, `repository`, `revision`,
  `ssh_wrapper`, `timeout`, and `user` are the properties available to this resource."
actions_list:
  :checkout:
    markdown: Clone or check out the source. When a checkout is available, this provider
      does nothing.
  :export:
    markdown: Export the source, excluding or removing any version control artifacts.
  :nothing:
    shortcode: resources_common_actions_nothing.md
  :sync:
    markdown: Default. Update the source to the specified version, or get a new clone
      or checkout. This action causes a hard reset of the index and working tree,
      discarding any uncommitted changes.
properties_list:
- property: additional_remotes
  ruby_type: Hash
  required: false
  description_list:
  - markdown: A Hash of additional remotes that are added to the git repository configuration.
- property: checkout_branch
  ruby_type: String
  required: false
  description_list:
  - markdown: 'Do a one-time checkout from git **or** use when a branch in the

      upstream repository is named `deploy`. To prevent the **git**

      resource from attempting to check out master from master, set

      `enable_checkout` to `false` when using the `checkout_branch`

      property. See `revision`.'
- property: depth
  ruby_type: Integer
  required: false
  description_list:
  - markdown: The number of past revisions to be included in the git shallow clone.
      Unless specified the default behavior will do a full clone.
- property: destination
  ruby_type: String
  required: false
  default_value: The resource block's name
  description_list:
  - markdown: 'The location path to which the source is to be cloned, checked out,
      or exported. Default value: the name of the resource block.'
- property: enable_checkout
  ruby_type: true, false
  required: false
  default_value: 'true'
  description_list:
  - markdown: Check out a repo from master. Set to `false` when using the `checkout_branch`
      attribute to prevent the git resource from attempting to check out `master`
      from `master`.
- property: enable_submodules
  ruby_type: true, false
  required: false
  default_value: 'false'
  description_list:
  - markdown: Perform a sub-module initialization and update.
- property: environment
  ruby_type: Hash
  required: false
  description_list:
  - markdown: 'A Hash of environment variables in the form of

      `({"ENV_VARIABLE" => "VALUE"})`. (These variables must exist for a

      command to be run successfully.)'
  - note:
    - markdown: 'The **git** provider automatically sets the `ENV[''HOME'']` and

        `ENV[''GIT_SSH'']` environment variables. To override this behavior

        and provide different values, add `ENV[''HOME'']` and/or

        `ENV[''GIT_SSH'']` to the `environment` Hash.'
- property: group
  ruby_type: String, Integer
  required: false
  description_list:
  - markdown: The system group that will own the checked-out code.
- property: remote
  ruby_type: String
  required: false
  default_value: origin
  description_list:
  - markdown: The remote repository to use when synchronizing an existing clone.
- property: repository
  ruby_type: String
  required: false
  description_list:
  - markdown: The URI of the code repository.
- property: revision
  ruby_type: String
  required: false
  default_value: HEAD
  description_list:
  - markdown: 'A branch, tag, or commit to be synchronized with git. This can be

      symbolic, like `HEAD` or it can be a source control

      management-specific revision identifier. See `checkout_branch`.


      The value of the `revision` attribute may change over time. From one

      branch to another, to a tag, to a specific SHA for a commit, and

      then back to a branch. The `revision` attribute may even be changed

      in a way where history gets rewritten.


      Instead of tracking a specific branch or doing a headless checkout,

      Chef Infra Client maintains its own branch (via the **git**

      resource) that does not exist in the upstream repository. Chef Infra

      Client is then free to forcibly check out this branch to any commit

      without destroying the local history of an existing branch.


      For example, to explicitly track an upstream repository''s master

      branch:


      ```ruby

      revision ''master''

      ```


      Use the `git rev-parse` and `git ls-remote` commands to verify that

      Chef Infra Client is synchronizing commits correctly. (Chef Infra

      Client always runs `git ls-remote` on the upstream repository to

      verify the commit is made to the correct repository.)'
- property: ssh_wrapper
  ruby_type: String
  required: false
  description_list:
  - markdown: The path to the wrapper script used when running SSH with git. The `GIT_SSH`
      environment variable is set to this.
- property: timeout
  ruby_type: Integer
  required: false
  description_list:
  - markdown: 'The amount of time (in seconds) to wait for a command to execute

      before timing out. When this property is specified using the

      **deploy** resource, the value of the `timeout` property is passed

      from the **deploy** resource to the **git** resource.'
- property: user
  ruby_type: String, Integer
  required: false
  default_value: "`HOME` environment variable of the user running chef-client"
  description_list:
  - markdown: The system user that will own the checked-out code.
examples: |
  **Use the git mirror**

  ```ruby
  git '/opt/my_sources/couch' do
    repository 'git://git.apache.org/couchdb.git'
    revision 'master'
    action :sync
  end
  ```

  **Use different branches**

  To use different branches, depending on the environment of the node:

  ```ruby
  branch_name = if node.chef_environment == 'QA'
                  'staging'
                else
                  'master'
                end

  git '/home/user/deployment' do
     repository 'git@github.com:git_site/deployment.git'
     revision branch_name
     action :sync
     user 'user'
     group 'test'
  end
  ```

  Where the `branch_name` variable is set to staging or master, depending on the environment of the node. Once this is determined, the `branch_name` variable is used to set the revision for the repository. If the git status command is used after running the example above, it will return the branch name as `deploy`, as this is the default value. Run Chef Infra Client in debug mode to verify that the correct branches are being checked out:

  ```
  sudo chef-client -l debug
  ```

  **Install an application from git using bash**

  The following example shows how Bash can be used to install a plug-in for rbenv named ruby-build, which is located in git version source control. First, the application is synchronized, and then Bash changes its working directory to the location in which ruby-build is located, and then runs a command.

  ```ruby
  git "/Users/tsmith/.chef/cache/ruby-build" do
    repository 'git://github.com/rbenv/ruby-build.git'
    revision 'master'
    action :sync
  end

  bash 'install_ruby_build' do
    cwd "/Users/tsmith/.chef/cache/ruby-build"
    user 'rbenv'
    group 'rbenv'
    code <<-EOH
      ./install.sh
      EOH
    environment 'PREFIX' => '/usr/local'
  end
  ```

  **Notify a resource post-checkout**

  ```ruby
  git "/Users/tsmith/.chef/cache/my_app" do
    repository node['my_app']['git_repository']
    revision node['my_app']['git_revision']
    action :sync
    notifies :run, 'bash[compile_my_app]', :immediately
  end
  ```

  **Pass in environment variables**

  ```ruby
  git '/opt/my_sources/couch' do
    repository 'git://git.apache.org/couchdb.git'
    revision 'master'
    environment 'VAR' => 'whatever'
    action :sync
  end
  ```