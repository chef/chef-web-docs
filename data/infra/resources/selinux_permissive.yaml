---
resource_reference: true
resources_common_guards: true
resources_common_notification: true
resources_common_properties: true
resource: selinux_permissive
resource_description_list:
- markdown: Use the **selinux_permissive** resource to allow some domains to misbehave
    without stopping them. This is not as good as setting specific policies, but better than disabling
    SELinux entirely.
resource_new_in: '18.0'
syntax_full_code_block: |-
  selinux_permissive 'name' do
    context      String # default value: 'name' unless specified
    action       Symbol # defaults to :add if not specified
  end
syntax_properties_list:
syntax_full_properties_list:
- "`selinux_permissive` is the resource."
- "`name` is the name given to the resource block."
- "`action` identifies which steps Chef Infra Client will take to bring the node into
  the desired state."
- "`context` is the property available to this resource."
actions_list:
  :nothing:
    shortcode: resources_common_actions_nothing.md
  :add:
    markdown: Make a domain permissive, unless already set. (default)
  :delete:
    markdown: Stop a domain from being permissive, if set.
properties_list:
- property: context
  ruby_type: String
  required: false
  default_value: The resource block's name.
  description_list:
  - markdown: The SELinux context to permit.
examples: |
  **Disable enforcement on Apache**:

  ```ruby
  selinux_permissive 'httpd_t' do
    notifies :restart, 'service[httpd]'
  end
  ```
