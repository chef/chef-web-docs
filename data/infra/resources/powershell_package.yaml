---
resource_reference: true
resources_common_guards: true
resources_common_notification: true
resources_common_properties: true
resource: powershell_package
resource_description_list:
- markdown: Use the **powershell_package** resource to install and manage packages
    with the PowerShell Package Manager for the Microsoft Windows platform. The **powershell_package**
    resource requires administrative access, and a source must be configured in the
    PowerShell Package Manager using the [**powershell_package_source**](/resources/powershell_package_source/) resource.
resource_new_in: '12.16'
syntax_description: |
  A **powershell_package** resource block manages a package on a node, typically by installing it. The simplest use of the **powershell_package** resource is:

  ```ruby
  powershell_package 'package_name'
  ```

  which will install the named package using all of the default options and the default action (`:install`).
syntax_full_code_block: |-
  powershell_package 'name' do
    options                   String, Array
    package_name              String, Array
    skip_publisher_check      true, false # default value: false
    source                    String
    timeout                   String, Integer
    version                   String, Array
    action                    Symbol # defaults to :install if not specified
  end
syntax_properties_list:
syntax_full_properties_list:
- "`powershell_package` is the resource."
- "`name` is the name given to the resource block."
- "`action` identifies which steps Chef Infra Client will take to bring the node into
  the desired state."
- "`options`, `package_name`, `skip_publisher_check`, `source`, `timeout`, and `version`
  are the properties available to this resource."
actions_list:
  :install:
    markdown: Install a package. If a version is specified, install the specified
      version of the package. (default)
  :remove:
    markdown: Remove a package.
properties_list:
- property: options
  ruby_type: String, Array
  required: false
  description_list:
  - markdown: One (or more) additional command options that are passed to the command.
- property: package_name
  ruby_type: String, Array
  required: false
  description_list:
  - markdown: 'The name of the package. Default value: the name of the resource block.'
- property: skip_publisher_check
  ruby_type: true, false
  required: false
  default_value: 'false'
  new_in: '14.3'
  description_list:
  - markdown: Skip validating module author.
- property: source
  ruby_type: String
  required: false
  new_in: '14.0'
  description_list:
  - markdown: Specify the source of the package.
- property: timeout
  ruby_type: String, Integer
  required: false
  description_list:
  - markdown: The amount of time (in seconds) to wait before timing out.
- property: version
  ruby_type: String, Array
  required: false
  description_list:
  - markdown: The version of a package to be installed or upgraded.
examples: |
  **Install a specific version of a package**:

  ```ruby
  powershell_package 'xCertificate' do
    action :install
    version '1.1.0.0'
  end
  ```


  **Install multiple packages**:

  ```ruby
  powershell_package 'Install Multiple Packages' do
    action :install
    package_name %w(xCertificate xNetworking)
  end
  ```

  **Install a package from a custom source**:

  ```ruby
  powershell_package 'xCertificate' do
    action :install
    source 'MyGallery'
  end
  ```


  **Install multiple packages, and specify package versions**:

  ```ruby
  powershell_package 'Install Multiple Packages' do
    action :install
    package_name %w(xCertificate xNetworking)
    version ['2.0.0.0', '2.12.0.0']
  end
  ```

  **Install multiple packages, specifying the package version for one
  package but not the other**:


  ```ruby
  powershell_package 'Install Multiple Packages' do
    action :install
    package_name %w(xCertificate xNetworking)
    version [nil, '2.12.0.0']
  end
  ```

  In this example, the `nil` tells `powershell_package` to install the
  most up to date version of `xCertificate` that is available, while
  pinning `xNetworking` to version 2.12.0.0.

  **Remove a package**:

  ```ruby
  powershell_package 'xCertificate' do
    action :remove
  end
  ```

