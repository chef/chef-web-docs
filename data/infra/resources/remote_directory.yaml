---
resource_reference: true
common_resource_functionality_resources_common_windows_security: true
remote_directory_recursive_directories: true
resource_directory_recursive_directories: true
resources_common_guards: true
resources_common_notification: true
resources_common_properties: true
resource: remote_directory
resource_description_list:
- markdown: Use the **remote_directory** resource to incrementally transfer a directory
    from a cookbook to a node. The directory that is copied from the cookbook should
    be located under `COOKBOOK_NAME/files/default/REMOTE_DIRECTORY`. The `remote_directory`
    resource will obey file specificity.
syntax_full_code_block: "remote_directory 'name' do\n  cookbook          String\n
  \ files_backup      Integer, false # default value: 5\n  files_group       String,
  Integer\n  files_mode        String, Integer # default value: \"0644 on *nix systems\"\n
  \ files_owner       String, Integer\n  group             \n  mode              \n
  \ overwrite         true, false # default value: true\n  owner             \n  path
  \             String # default value: 'name' unless specified\n  purge             true,
  false # default value: false\n  recursive         true, false # default value: true\n
  \ source            String\n  action            Symbol # defaults to :create if
  not specified\nend"
syntax_properties_list: 
syntax_full_properties_list:
- "`remote_directory` is the resource."
- "`name` is the name given to the resource block."
- "`action` identifies which steps Chef Infra Client will take to bring the node into
  the desired state."
- "`cookbook`, `files_backup`, `files_group`, `files_mode`, `files_owner`, `group`,
  `mode`, `overwrite`, `owner`, `path`, `purge`, `recursive`, and `source` are the
  properties available to this resource."
actions_list:
  :nothing:
    shortcode: resources_common_actions_nothing.md
  :create:
    markdown: Create a directory. If a directory already exists (but does not match),
      update that directory to match. (default)
  :delete:
    markdown: Delete a directory.
  :create_if_missing:
    markdown: 
properties_list:
- property: cookbook
  ruby_type: String
  required: false
  description_list:
  - markdown: The cookbook in which a file is located (if it is not located in the
      current cookbook). The default value is the current cookbook.
- property: files_backup
  ruby_type: Integer, false
  required: false
  default_value: '5'
  description_list:
  - markdown: The number of backup copies to keep for files in the directory.
- property: files_group
  ruby_type: String, Integer
  required: false
  description_list:
  - markdown: Configure group permissions for files. A string or ID that identifies
      the group owner by group name, including fully qualified group names such as
      `domain\group` or `group@domain`. If this value is not specified, existing groups
      remain unchanged and new group assignments use the default POSIX group (if available).
- property: files_mode
  ruby_type: String, Integer
  required: false
  default_value: 0644 on *nix systems
  description_list:
  - markdown: |-
      The octal mode for a file.
       UNIX- and Linux-based systems: A quoted 3-5 character string that defines the octal mode that is passed to chmod. For example: '755', '0755', or 00755. If the value is specified as a quoted string, it works exactly as if the chmod command was passed. If the value is specified as an integer, prepend a zero (0) to the value to ensure that it is interpreted as an octal number. For example, to assign read, write, and execute rights for all users, use '0777' or '777'; for the same rights, plus the sticky bit, use 01777 or '1777'.
       Microsoft Windows: A quoted 3-5 character string that defines the octal mode that is translated into rights for Microsoft Windows security. For example: '755', '0755', or 00755. Values up to '0777' are allowed (no sticky bits) and mean the same in Microsoft Windows as they do in UNIX, where 4 equals GENERIC_READ, 2 equals GENERIC_WRITE, and 1 equals GENERIC_EXECUTE. This property cannot be used to set :full_control. This property has no effect if not specified, but when it and rights are both specified, the effects are cumulative.
- property: files_owner
  ruby_type: String, Integer
  required: false
  description_list:
  - markdown: Configure owner permissions for files. A string or ID that identifies
      the group owner by user name, including fully qualified user names such as `domain\user`
      or `user@domain`. If this value is not specified, existing owners remain unchanged
      and new owner assignments use the current user (when necessary).
- property: group
  ruby_type: ''
  required: false
  description_list:
  - markdown: 
- property: mode
  ruby_type: ''
  required: false
  description_list:
  - markdown: 
- property: overwrite
  ruby_type: true, false
  required: false
  default_value: 'true'
  description_list:
  - markdown: Overwrite a file when it is different.
- property: owner
  ruby_type: ''
  required: false
  description_list:
  - markdown: 
- property: path
  ruby_type: String
  required: false
  default_value: The resource block's name
  description_list:
  - markdown: The path to the directory. Using a fully qualified path is recommended,
      but is not always required.
- property: purge
  ruby_type: true, false
  required: false
  default_value: 'false'
  description_list:
  - markdown: Purge extra files found in the target directory.
- property: recursive
  ruby_type: true, false
  required: false
  default_value: 'true'
  description_list:
  - markdown: Create or delete parent directories recursively. For the owner, group,
      and mode properties, the value of this attribute applies only to the leaf directory.
- property: source
  ruby_type: String
  required: false
  default_value: The base portion of the 'path' property. For example '/some/path/'
    would be 'path'.
  description_list:
  - markdown: The base name of the source file (and inferred from the path property).
examples: 
