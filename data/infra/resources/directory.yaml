---
resource_reference: true
properties_resources_common_windows_security: true
resource_directory_recursive_directories: true
resources_common_guards: true
resources_common_notification: true
resources_common_properties: true
resource: directory
resource_description_list:
- markdown: Use the **directory** resource to manage a directory, which is a hierarchy
    of folders that comprises all of the information stored on a computer. The root
    directory is the top-level, under which the rest of the directory is organized.
    The directory resource uses the name property to specify the path to a location
    in a directory. Typically, permission to access that location in the directory
    is required.
syntax_description: |
  A **directory** resource block declares a directory and the permissions
  needed on that directory. For example:

  ```ruby
  directory '/etc/apache2' do
    owner 'root'
    group 'root'
    mode '0755'
    action :create
  end
  ```
syntax_properties_list:
syntax_full_code_block: |-
  directory 'name' do
    group                      String, Integer
    inherits                   true, false
    mode                       String, Integer
    owner                      String, Integer
    path                       String # defaults to 'name' if not specified
    recursive                  true, false
    rights                     Hash
    action                     Symbol # defaults to :create if not specified
  end
syntax_full_properties_list:
- "`directory` is the resource."
- "`name` is the name given to the resource block."
- "`action` identifies which steps Chef Infra Client will take to bring the node into
  the desired state."
- "`group`, `mode`, `owner`, `path`, and `recursive` are the properties available
  to this resource."
actions_list:
  :nothing:
    shortcode: resources_common_actions_nothing.md
  :create:
    markdown: Create a directory. If a directory already exists (but does not match),
      update that directory to match. (default)
  :delete:
    markdown: Delete a directory.
properties_list:
- property: group
  ruby_type: Integer, String
  required: false
  description_list:
  - markdown: 'A string or ID that identifies the group owner by group name or SID,

      including fully qualified group names such as `domain\group` or

      `group@domain`. If this value is not specified, existing groups

      remain unchanged and new group assignments use the default `POSIX`

      group (if available).'
- property: inherits
  ruby_type: true, false
  required: false
  default_value: 'true'
  description_list:
  - markdown: 'Microsoft Windows only. Whether a file inherits rights from its

      parent directory.'
- property: mode
  ruby_type: Integer, String
  required: false
  description_list:
  - markdown: 'A quoted 3-5 character string that defines the octal mode. For

      example: `''755''`, `''0755''`, or `00755`. If `mode` is not specified

      and if the directory already exists, the existing mode on the

      directory is used. If `mode` is not specified, the directory does

      not exist, and the `:create` action is specified, Chef Infra Client

      assumes a mask value of `''0777''`, and then applies the umask for the

      system on which the directory is to be created to the `mask` value.

      For example, if the umask on a system is `''022''`, Chef Infra Client

      uses the default value of `''0755''`.


      The behavior is different depending on the platform.


      UNIX- and Linux-based systems: A quoted 3-5 character string that

      defines the octal mode that is passed to chmod. For example:

      `''755''`, `''0755''`, or `00755`. If the value is specified as a quoted

      string, it works exactly as if the `chmod` command was passed. If

      the value is specified as an integer, prepend a zero (`0`) to the

      value to ensure that it is interpreted as an octal number. For

      example, to assign read, write, and execute rights for all users,

      use `''0777''` or `''777''`; for the same rights, plus the sticky bit,

      use `01777` or `''1777''`.


      Microsoft Windows: A quoted 3-5 character string that defines the

      octal mode that is translated into rights for Microsoft Windows

      security. For example: `''755''`, `''0755''`, or `00755`. Values up to

      `''0777''` are allowed (no sticky bits) and mean the same in Microsoft

      Windows as they do in UNIX, where `4` equals `GENERIC_READ`, `2`

      equals `GENERIC_WRITE`, and `1` equals `GENERIC_EXECUTE`. This

      property cannot be used to set `:full_control`. This property has no

      effect if not specified, but when it and `rights` are both

      specified, the effects are cumulative.'
- property: owner
  ruby_type: Integer, String
  required: false
  description_list:
  - markdown: 'A string or ID that identifies the group owner by user name or SID,

      including fully qualified user names such as `domain\user` or

      `user@domain`. If this value is not specified, existing owners

      remain unchanged and new owner assignments use the current user

      (when necessary).'
- property: path
  ruby_type: String
  required: false
  default_value: The resource block's name
  description_list:
  - markdown: 'The path to the directory. Using a fully qualified path is

      recommended, but is not always required. Default value: the `name`

      of the resource block. See "Syntax" section above for more

      information.'
- property: recursive
  ruby_type: true, false
  required: false
  default_value: 'false'
  description_list:
  - markdown: Create parent directories recursively, or delete directory and all children
      recursively. For the owner, group, and mode properties, the value of this property
      applies only to the leaf directory.
- property: rights
  ruby_type: Integer, String
  required: false
  description_list:
  - markdown: 'Microsoft Windows only. The permissions for users and groups in a
      Microsoft Windows environment. For example:
      `rights <permissions>, <principal>, <options>` where `<permissions>`
      specifies the rights granted to the principal, `<principal>` is the
      group or user name, and `<options>` is a Hash with one (or more)
      advanced rights options.'
examples: |
  Create a directory

  ```ruby
  directory '/tmp/something' do
    owner 'root'
    group 'root'
    mode '0755'
    action :create
  end

  ```

  Create a directory in Microsoft Windows

  ```ruby
  directory "C:\\tmp\\something" do
    rights :full_control, "DOMAIN\\User"
    inherits false
    action :create
  end
  ```

  or:

  ```ruby
  directory 'C:\tmp\something' do
    rights :full_control, 'DOMAIN\User'
    inherits false
    action :create
  end
  ```

  <div class="admonition-note">
    <p class="admonition-note-title">Note</p>
    <div class="admonition-note-text">
      <p>The difference between the two previous examples is the single- versus
      double-quoted strings, where if the double quotes are used, the backslash character
      (<code>\</code>) must be escaped using the Ruby escape character (which is a
      backslash).</p>
    </div>
  </div>

  Create a directory recursively:

  ```ruby
  %w{dir1 dir2 dir3}.each do |dir|
    directory "/tmp/mydirs/#{dir}" do
      mode '0755'
      owner 'root'
      group 'root'
      action :create
      recursive true
    end
  end
  ```

  Delete a directory:

  ```ruby
  directory '/tmp/something' do
    recursive true
    action :delete
  end
  ```

  Set directory permissions using a variable

  The following example
  shows how read/write/execute permissions can be
  set using a variable named
  `user_home`, and then for owners and groups
  on any matching node:

  ```ruby
  user_home = "/#{node[:matching_node][:user]}"

  directory user_home do
    owner 'node[:matching_node][:user]'
    group 'node[:matching_node][:group]'
    mode '0755'
    action :create
  end
  ```

  where `matching_node` represents
  a type of node. For example, if the
  `user_home` variable specified `{node[:nginx]...}`,
  a recipe might look
  similar to:

  ```ruby
  user_home = "/#{node[:nginx][:user]}"

  directory user_home do
    owner 'node[:nginx][:user]'
    group 'node[:nginx][:group]'
    mode '0755'
    action :create
  end
  ```

  Set directory permissions for a specific type of node

  The following example shows how permissions can be set for the
  `/certificates` directory on any node that is running Nginx. In this
  example, permissions are being set for the `owner` and `group`
  properties as `root`, and then read/write permissions are granted to the
  root.

  ```ruby
  directory "#{node[:nginx][:dir]}/shared/certificates" do
    owner 'root'
    group 'root'
    mode '0755'
    recursive true
  end
  ```


  Reload the configuration

  The following example shows how to reload the configuration of a
  chef-client using the **remote_file** resource to:

  -   using an if statement to check whether the plugins on a node are the
      latest versions
  -   identify the location from which Ohai plugins are stored
  -   using the `notifies` property and a **ruby_block** resource to
      trigger an update (if required) and to then reload the client.rb
      file.

  ```ruby
  directory 'node[:ohai][:plugin_path]' do
    owner 'chef'
    recursive true
  end

  ruby_block 'reload_config' do
    block do
      Chef::Config.from_file('/etc/chef/client.rb')
    end
    action :nothing
  end

  if node[:ohai].key?(:plugins)
    node[:ohai][:plugins].each do |plugin|
      remote_file node[:ohai][:plugin_path] +"/#{plugin}" do
        source plugin
        owner 'chef'
        notifies :run, 'ruby_block[reload_config]', :immediately
      end
    end
  end
  ```

  Manage dotfiles

  The following example shows using the **directory** and
  **cookbook_file** resources to manage dotfiles. The dotfiles are
  defined by a JSON data structure similar to:

  ```javascript
  "files": {
    ".zshrc": {
      "mode": '0755',
      "source": "dot-zshrc"
      },
    ".bashrc": {
      "mode": '0755',
      "source": "dot-bashrc"
      },
    ".bash_profile": {
      "mode": '0755',
      "source": "dot-bash_profile"
      },
    }
  ```

  and then the following resources manage the dotfiles:

  ```ruby
  if u.has_key?('files')
    u['files'].each do |filename, file_data|

    directory "#{home_dir}/#{File.dirname(filename)}" do
      recursive true
      mode '0755'
    end if file_data['subdir']

    cookbook_file "#{home_dir}/#{filename}" do
      source "#{u['id']}/#{file_data['source']}"
      owner 'u['id']'
      group 'group_id'
      mode 'file_data['mode']'
      ignore_failure true
      backup 0
    end
  end
  ```
