---
resource_reference: true
resources_common_guards: true
resources_common_notification: true
resources_common_properties: true
resource: inspec_waiver
resource_description_list:
- markdown: Use the **inspec_waiver** resource to add a waiver to the Compliance Phase.
resource_new_in: '17.5'
syntax_full_code_block: |-
  inspec_waiver 'name' do
    control            String # default value: 'name' unless specified
    expiration         String
    justification      String
    run_test           true, false
    source             Hash, String
    action             Symbol # defaults to :add if not specified
  end
syntax_properties_list:
syntax_full_properties_list:
- "`inspec_waiver` is the resource."
- "`name` is the name given to the resource block."
- "`action` identifies which steps Chef Infra Client will take to bring the node into
  the desired state."
- "`control`, `expiration`, `justification`, `run_test`, and `source` are the properties
  available to this resource."
actions_list:
  :nothing:
    shortcode: resources_common_actions_nothing.md
  :add:
    markdown: Add a waiver to the compliance phase (default)
properties_list:
- property: control
  ruby_type: String
  required: false
  default_value: The resource block's name
  description_list:
  - markdown: The name of the control being waived
- property: expiration
  ruby_type: String
  required: false
  description_list:
  - markdown: The expiration date of the waiver - provided in YYYY-MM-DD format
- property: justification
  ruby_type: String
  required: false
  description_list:
  - markdown: Can be any text you want and might include a reason for the waiver as
      well as who signed off on the waiver.
- property: run_test
  ruby_type: true, false
  required: false
  description_list:
  - markdown: If present and true, the control will run and be reported, but failures
      in it wonâ€™t make the overall run fail. If absent or false, the control will
      not be run.
- property: source
  ruby_type: Hash, String
  required: false
  description_list:
  - markdown:
examples: |
  **Activate the default waiver in the openssh cookbook's compliance segment**:

  ```ruby
    inspec_waiver 'openssh' do
      action :add
    end
  ```

  **Activate all waivers in the openssh cookbook's compliance segment**:

  ```ruby
    inspec_waiver 'openssh::.*' do
      action :add
    end
  ```

  **Add an InSpec waiver to the Compliance Phase**:

  ```ruby
    inspec_waiver 'Add waiver entry for control' do
      control 'my_inspec_control_01'
      run_test false
      justification "The subject of this control is not managed by Chef Infra Client on the systems in policy group #{node['policy_group']}"
      expiration '2022-01-01'
      action :add
    end
  ```

  **Add an InSpec waiver to the Compliance Phase using the 'name' property to identify the control**:

  ```ruby
    inspec_waiver 'my_inspec_control_01' do
      justification "The subject of this control is not managed by Chef Infra Client on the systems in policy group #{node['policy_group']}"
      action :add
    end
  ```

  **Add an InSpec waiver to the Compliance Phase using an arbitrary YAML, JSON, or TOML file**:

  ```ruby
    # files ending in .yml or .yaml that exist are parsed as YAML
    inspec_waiver "/path/to/my/waiver.yml"

    inspec_waiver "my-waiver-name" do
      source "/path/to/my/waiver.yml"
    end

    # files ending in .json that exist are parsed as JSON
    inspec_waiver "/path/to/my/waiver.json"

    inspec_waiver "my-waiver-name" do
      source "/path/to/my/waiver.json"
    end

    # files ending in .toml that exist are parsed as TOML
    inspec_waiver "/path/to/my/waiver.toml"

    inspec_waiver "my-waiver-name" do
      source "/path/to/my/waiver.toml"
    end
  ```

  **Add an InSpec waiver to the Compliance Phase using a hash**:

  ```ruby
    my_hash = { "ssh-01" => {
      "expiration_date" => "2033-07-31",
      "run" => false,
      "justification" => "because"
    } }

    inspec_waiver "my-waiver-name" do
      source my_hash
    end
  ```

  Note that the **inspec_waiver** resource does not update and will not fire notifications (similar to the log resource). This is done to preserve the ability to use
  the resource while not causing the updated resource count to be larger than zero. Since the resource does not update the state of the managed node, this behavior
  is still consistent with the configuration management model. Instead, you should use events to observe configuration changes for the compliance phase. It is
  possible to use the `notify_group` resource to chain notifications of the two resources, but notifications are the wrong model to use, and you should use pure ruby
  conditionals instead. Compliance configuration should be independent of other resources and should only be conditional based on state/attributes, not other resources.
