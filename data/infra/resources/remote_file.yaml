---
resource_reference: true
properties_resources_common_windows_security: true
remote_file_prevent_re_downloads: true
remote_file_unc_path: true
resources_common_atomic_update: true
resource: remote_file
resource_description_list:
- markdown: Use the **remote_file** resource to transfer a file from a remote location
    using file specificity. This resource is similar to the **file** resource.
- note:
    markdown: Fetching files from the `files/` directory in a cookbook should be done
      with the **cookbook_file** resource.
syntax_full_code_block: "remote_file 'name' do\n  atomic_update              true,
  false\n  authentication             Symbol # default value: :remote\n  backup                     Integer,
  false # default value: 5\n  checksum                   String\n  content                    String\n
  \ deny_rights                \n  force_unlink               true, false # default
  value: false\n  ftp_active_mode            true, false # default value: false\n
  \ headers                    Hash # default value: {}\n  http_options               Hash
  # default value: {}\n  manage_symlink_source      true, false\n  path                       String
  # default value: 'name' unless specified\n  remote_domain              String\n
  \ remote_password            String\n  remote_user                String\n  rights
  \                    \n  show_progress              true, false # default value:
  false\n  ssl_verify_mode            Symbol\n  use_etag                   true, false
  # default value: true\n  use_last_modified          true, false # default value:
  true\n  action                     Symbol # defaults to :create if not specified\nend"
syntax_properties_list: 
syntax_full_properties_list:
- "`remote_file` is the resource."
- "`name` is the name given to the resource block."
- "`action` identifies which steps Chef Infra Client will take to bring the node into
  the desired state."
- "`atomic_update`, `authentication`, `backup`, `checksum`, `content`, `deny_rights`,
  `force_unlink`, `ftp_active_mode`, `headers`, `http_options`, `manage_symlink_source`,
  `path`, `remote_domain`, `remote_password`, `remote_user`, `rights`, `show_progress`,
  `ssl_verify_mode`, `use_etag`, and `use_last_modified` are the properties available
  to this resource."
actions_list:
  :nothing:
    shortcode: resources_common_actions_nothing.md
  :create:
    markdown: " (default)"
  :delete:
    markdown: 
  :touch:
    markdown: 
  :create_if_missing:
    markdown: 
properties_list:
- property: atomic_update
  ruby_type: true, false
  required: false
  default_value: False if modifying /etc/hosts, /etc/hostname, or /etc/resolv.conf
    within Docker containers. Otherwise default to the client.rb 'file_atomic_update'
    config value.
  description_list:
  - markdown: Perform atomic file updates on a per-resource basis. Set to true for
      atomic file updates. Set to false for non-atomic file updates. This setting
      overrides `file_atomic_update`, which is a global setting found in the `client.rb`
      file.
- property: authentication
  ruby_type: Symbol
  required: false
  default_value: ":remote"
  allowed_values: ":local, :remote"
  description_list:
  - markdown: 
- property: backup
  ruby_type: Integer, false
  required: false
  default_value: '5'
  description_list:
  - markdown: The number of backups to be kept in `/var/chef/backup` (for UNIX- and
      Linux-based platforms) or `C:/chef/backup` (for the Microsoft Windows platform).
      Set to `false` to prevent backups from being kept.
- property: checksum
  ruby_type: String
  required: false
  description_list:
  - markdown: Optional, see `use_conditional_get`. The SHA-256 checksum of the file.
      Use to prevent a file from being re-downloaded. When the local file matches
      the checksum, Chef Infra Client does not download it.
- property: content
  ruby_type: String
  required: false
  description_list:
  - markdown: A string that is written to the file. The contents of this property
      replace any previous content when this property has something other than the
      default value. The default behavior will not modify content.
- property: deny_rights
  ruby_type: ''
  required: false
  description_list:
  - markdown: 
- property: force_unlink
  ruby_type: true, false
  required: false
  default_value: 'false'
  description_list:
  - markdown: How Chef Infra Client handles certain situations when the target file
      turns out not to be a file. For example, when a target file is actually a symlink.
      Set to `true` for Chef Infra Client to delete the non-file target and replace
      it with the specified file. Set to `false` for Chef Infra Client to raise an
      error.
- property: ftp_active_mode
  ruby_type: true, false
  required: false
  default_value: 'false'
  description_list:
  - markdown: Whether Chef Infra Client uses active or passive FTP. Set to `true`
      to use active FTP.
- property: headers
  ruby_type: Hash
  required: false
  default_value: "{}"
  description_list:
  - markdown: |-
      A Hash of custom headers. For example:

      ```ruby
      headers({ "Cookie" => "user=some_user; pass=p@ssw0rd!" })
      ```

      or:

      ```ruby
      headers({ "Referer" => "#{header}" })
      ```

      or:

      ```ruby
      headers( "Authorization"=>"Basic #{ Base64.encode64("#{username}:#{password}").gsub("\n", "") }" )
      ```
- property: http_options
  ruby_type: Hash
  required: false
  default_value: "{}"
  new_in: '17.5'
  description_list:
  - markdown: 'A Hash of custom HTTP options. For example: `http_options({ http_retry_count:
      0, http_retry_delay: 2 })`'
- property: manage_symlink_source
  ruby_type: true, false
  required: false
  description_list:
  - markdown: Change the behavior of the file resource if it is pointed at a symlink.
      When this value is set to true, Chef Infra Client will manage the symlink's
      permissions or will replace the symlink with a normal file if the resource has
      content. When this value is set to false, Chef Infra Client will follow the
      symlink and will manage the permissions and content of symlink's target file.
      The default behavior is true but emits a warning that the default value will
      be changed to false in a future version; setting this explicitly to true or
      false suppresses this warning.
- property: path
  ruby_type: String
  required: false
  default_value: The resource block's name
  description_list:
  - markdown: 'The full path to the file, including the file name and its extension.
      For example: /files/file.txt. Default value: the name of the resource block.
      Microsoft Windows: A path that begins with a forward slash `/` will point to
      the root of the current working directory of the Chef Infra Client process.
      This path can vary from system to system. Therefore, using a path that begins
      with a forward slash `/` is not recommended.'
- property: remote_domain
  ruby_type: String
  required: false
  new_in: '13.4'
  description_list:
  - markdown: "**Windows only** The domain of the user specified by the `remote_user`
      property. By default the resource will authenticate against the domain of the
      remote system, or as a local account if the remote system is not joined to a
      domain. If the remote system is not part of a domain, it is necessary to authenticate
      as a local user on the remote system by setting the domain to `.`, for example:
      remote_domain '.'. The domain may also be specified as part of the `remote_user`
      property."
- property: remote_password
  ruby_type: String
  required: false
  new_in: '13.4'
  description_list:
  - markdown: "**Windows only** The password of the user specified by the `remote_user`
      property. This property is required if `remote_user` is specified and may only
      be specified if `remote_user` is specified. The `sensitive` property for this
      resource will automatically be set to `true` if `remote_password` is specified."
- property: remote_user
  ruby_type: String
  required: false
  new_in: '13.4'
  description_list:
  - markdown: "**Windows only** The name of a user with access to the remote file
      specified by the source property. The user name may optionally be specified
      with a domain, such as: `domain\\user` or `user@my.dns.domain.com` via Universal
      Principal Name (UPN) format. The domain may also be set using the `remote_domain`
      property. Note that this property is ignored if source is not a UNC path. If
      this property is specified, the `remote_password` property is required."
- property: rights
  ruby_type: ''
  required: false
  description_list:
  - markdown: 
- property: show_progress
  ruby_type: true, false
  required: false
  default_value: 'false'
  description_list:
  - markdown: Displays the progress of the file download.
- property: ssl_verify_mode
  ruby_type: Symbol
  required: false
  new_in: '16.2'
  allowed_values: ":verify_none, :verify_peer"
  description_list:
  - markdown: Optional property to override SSL policy. If not specified, uses the
      SSL policy from `config.rb`.
- property: use_etag
  ruby_type: true, false
  required: false
  default_value: 'true'
  description_list:
  - markdown: Enable ETag headers. Set to `false` to disable ETag headers. To use
      this setting, `use_conditional_get` must also be set to true.
- property: use_last_modified
  ruby_type: true, false
  required: false
  default_value: 'true'
  description_list:
  - markdown: Enable `If-Modified-Since` headers. Set to `false` to disable `If-Modified-Since`
      headers. To use this setting, `use_conditional_get` must also be set to `true`.
examples: |
  **Download a file without checking the checksum**:

  ```ruby
    remote_file '/tmp/remote.txt' do
      source 'https://example.org/remote.txt'
    end
  ```

  **Download a file with a checksum to validate**:

  ```ruby
    remote_file '/tmp/test_file' do
      source 'http://www.example.com/tempfiles/test_file'
      mode '0755'
      checksum '3a7dac00b1' # A SHA256 (or portion thereof) of the file.
    end
  ```

  **Download a file only if it's not already present**:

  ```ruby
    remote_file '/tmp/remote.txt' do
      source 'https://example.org/remote.txt'
      checksum '3a7dac00b1' # A SHA256 (or portion thereof) of the file.
      action :create_if_missing
    end
  ```

  **Using HTTP Basic Authentication in Headers**:

  ```ruby
    remote_file '/tmp/remote.txt' do
      source 'https://example.org/remote.txt'
      headers('Authorization' => "Basic #{Base64.encode64("USERNAME_VALUE:PASSWORD_VALUE").delete("\n")}")
      checksum '3a7dac00b1' # A SHA256 (or portion thereof) of the file.
      action :create_if_missing
    end
  ```

  **Downloading a file to the Chef file cache dir for execution**:

  ```ruby
    remote_file '#{Chef::Config['file_cache_path']}/install.sh' do
      source 'https://example.org/install.sh'
      action :create_if_missing
    end

    execute '#{Chef::Config['file_cache_path']}/install.sh'
  ```

  **Specify advanced HTTP connection options including Net::HTTP (nethttp) options:**

  ```ruby
    remote_file '/tmp/remote.txt' do
      source 'https://example.org/remote.txt'
      http_options({
        http_retry_delay: 0,
        http_retry_count: 0,
        keepalives: false,
        nethttp: {
          continue_timeout: 5,
          max_retries: 5,
          read_timeout: 5,
          write_timeout: 5,
          ssl_timeout: 5,
        },
      })
    end
  ```
