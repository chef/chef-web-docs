---
resource_reference: true
resources_common_guards: true
resources_common_notification: true
resources_common_properties: true
resource: windows_service
resource_description_list:
- markdown: Use the **windows_service** resource to create, delete, or manage a service
    on the Microsoft Windows platform.
resource_new_in: '12.0'
syntax_full_code_block: |-
  windows_service 'name' do
    binary_path_name      String
    delayed_start         true, false # default value: false
    dependencies          String, Array
    description           String
    desired_access        Integer # default value: 983551
    display_name          String
    error_control         Integer # default value: 1
    init_command          String
    load_order_group      String
    options               Array, String
    parameters            Hash
    pattern               String
    priority              Integer, String, Hash
    reload_command        String, false
    restart_command       String, false
    run_as_password       String
    run_as_user           String # default value: "localsystem"
    run_levels            Array
    service_name          String # default value: 'name' unless specified
    service_type          Integer # default value: 16
    start_command         String, false
    startup_type          Symbol # default value: :automatic
    status_command        String, false
    stop_command          String, false
    supports              Hash # default value: {"restart"=>nil, "reload"=>nil, "status"=>nil}
    timeout               Integer # default value: 60
    user                  String
    action                Symbol # defaults to :nothing if not specified
  end
syntax_properties_list: 
syntax_full_properties_list:
- "`windows_service` is the resource."
- "`name` is the name given to the resource block."
- "`action` identifies which steps Chef Infra Client will take to bring the node into
  the desired state."
- "`binary_path_name`, `delayed_start`, `dependencies`, `description`, `desired_access`,
  `display_name`, `error_control`, `init_command`, `load_order_group`, `options`,
  `parameters`, `pattern`, `priority`, `reload_command`, `restart_command`, `run_as_password`,
  `run_as_user`, `run_levels`, `service_name`, `service_type`, `start_command`, `startup_type`,
  `status_command`, `stop_command`, `supports`, `timeout`, and `user` are the properties
  available to this resource."
actions_list:
  :nothing:
    shortcode: resources_common_actions_nothing.md
  :enable:
    markdown: 
  :disable:
    markdown: 
  :start:
    markdown: 
  :stop:
    markdown: 
  :restart:
    markdown: 
  :reload:
    markdown: 
  :mask:
    markdown: 
  :unmask:
    markdown: 
  :configure_startup:
    markdown: 
  :create:
    markdown: 
  :delete:
    markdown: 
  :configure:
    markdown: 
properties_list:
- property: binary_path_name
  ruby_type: String
  required: false
  new_in: '14.0'
  description_list:
  - markdown: The fully qualified path to the service binary file. The path can also
      include arguments for an auto-start service. This is required for `:create`
      and `:configure` actions
- property: delayed_start
  ruby_type: true, false
  required: false
  default_value: 'false'
  new_in: '14.0'
  description_list:
  - markdown: Set the startup type to delayed start. This only applies if `startup_type`
      is `:automatic`
- property: dependencies
  ruby_type: String, Array
  required: false
  new_in: '14.0'
  description_list:
  - markdown: A pointer to a double null-terminated array of null-separated names
      of services or load ordering groups that the system must start before this service.
      Specify `nil` or an empty string if the service has no dependencies. Dependency
      on a group means that this service can run if at least one member of the group
      is running after an attempt to start all members of the group.
- property: description
  ruby_type: String
  required: false
  new_in: '14.0'
  description_list:
  - markdown: Description of the service.
- property: desired_access
  ruby_type: Integer
  required: false
  default_value: '983551'
  new_in: '14.0'
  description_list:
  - markdown:
- property: display_name
  ruby_type: String
  required: false
  new_in: '14.0'
  description_list:
  - markdown: The display name to be used by user interface programs to identify the
      service. This string has a maximum length of 256 characters.
- property: error_control
  ruby_type: Integer
  required: false
  default_value: '1'
  new_in: '14.0'
  description_list:
  - markdown: 
- property: init_command
  ruby_type: String
  required: false
  description_list:
  - markdown: The path to the init script that is associated with the service. Use
      init_command to prevent the need to specify overrides for the start_command,
      stop_command, and restart_command properties. When this property is not specified,
      the Chef Infra Client will use the default init command for the service provider
      being used.
- property: load_order_group
  ruby_type: String
  required: false
  new_in: '14.0'
  description_list:
  - markdown: The name of the service's load ordering group(s).
- property: options
  ruby_type: Array, String
  required: false
  description_list:
  - markdown: Solaris platform only. Options to pass to the service command. See the
      svcadm manual for details of possible options.
- property: parameters
  ruby_type: Hash
  required: false
  description_list:
  - markdown: 'Upstart only: A hash of parameters to pass to the service command for
      use in the service definition.'
- property: pattern
  ruby_type: String
  required: false
  default_value: The value provided to 'service_name' or the resource block's name
  description_list:
  - markdown: The pattern to look for in the process table.
- property: priority
  ruby_type: Integer, String, Hash
  required: false
  description_list:
  - markdown: Debian platform only. The relative priority of the program for start
      and shutdown ordering. May be an integer or a Hash. An integer is used to define
      the start run levels; stop run levels are then 100-integer. A Hash is used to
      define values for specific run levels. For example, { 2 => [:start, 20], 3 =>
      [:stop, 55] } will set a priority of twenty for run level two and a priority
      of fifty-five for run level three.
- property: reload_command
  ruby_type: String, false
  required: false
  description_list:
  - markdown: The command used to tell a service to reload its configuration.
- property: restart_command
  ruby_type: String, false
  required: false
  description_list:
  - markdown: The command used to restart a service.
- property: run_as_password
  ruby_type: String
  required: false
  description_list:
  - markdown: The password for the user specified by `run_as_user`.
- property: run_as_user
  ruby_type: String
  required: false
  default_value: localsystem
  description_list:
  - markdown: The user under which a Microsoft Windows service runs.
- property: run_levels
  ruby_type: Array
  required: false
  description_list:
  - markdown: 'RHEL platforms only: Specific run_levels the service will run under.'
- property: service_name
  ruby_type: String
  required: false
  default_value: The resource block's name
  description_list:
  - markdown: An optional property to set the service name if it differs from the
      resource block's name.
- property: service_type
  ruby_type: Integer
  required: false
  default_value: '16'
  new_in: '14.0'
  description_list:
  - markdown:
- property: start_command
  ruby_type: String, false
  required: false
  description_list:
  - markdown: The command used to start a service.
- property: startup_type
  ruby_type: Symbol
  required: false
  default_value: ":automatic"
  allowed_values: ":automatic, :disabled, :manual"
  description_list:
  - markdown: Use to specify the startup type of the service.
- property: status_command
  ruby_type: String, false
  required: false
  description_list:
  - markdown: The command used to check the run status for a service.
- property: stop_command
  ruby_type: String, false
  required: false
  description_list:
  - markdown: The command used to stop a service.
- property: supports
  ruby_type: Hash
  required: false
  default_value: '{"restart"=>nil, "reload"=>nil, "status"=>nil}'
  description_list:
  - markdown: 'A list of properties that controls how Chef Infra Client is to attempt
      to manage a service: :restart, :reload, :status. For :restart, the init script
      or other service provider can use a restart command; if :restart is not specified,
      the chef-client attempts to stop and then start a service. For :reload, the
      init script or other service provider can use a reload command. For :status,
      the init script or other service provider can use a status command to determine
      if the service is running; if :status is not specified, the chef-client attempts
      to match the service_name against the process table as a regular expression,
      unless a pattern is specified as a parameter property. Default value: { restart:
      false, reload: false, status: false } for all platforms (except for the Red
      Hat platform family, which defaults to { restart: false, reload: false, status:
      true }.)'
- property: timeout
  ruby_type: Integer
  required: false
  default_value: '60'
  description_list:
  - markdown: The amount of time (in seconds) to wait before timing out.
- property: user
  ruby_type: String
  required: false
  new_in: '12.21'
  description_list:
  - markdown: 'systemd only: A username to run the service under.'
examples: |
  **Starting Services**

  Start a service with a `manual` startup type:

  ```ruby
  windows_service 'BITS' do
    action :configure_startup
    startup_type :manual
  end
  ```

  **Creating Services**

  Create a service named chef-client:

  ```ruby
  windows_service 'chef-client' do
    action :create
    binary_path_name "C:\opscode\chef\bin"
  end
  ```

  Create a service with `service_name` and `display_name`:

  ```ruby
  windows_service 'Setup chef-client as a service' do
    action :create
    display_name 'CHEF-CLIENT'
    service_name 'chef-client'
    binary_path_name "C:\opscode\chef\bin"
  end
  ```

  Create a service with the `manual` startup type:

  ```ruby
  windows_service 'chef-client' do
    action :create
    binary_path_name "C:\opscode\chef\bin"
    startup_type :manual
  end
  ```

  Create a service with the `disabled` startup type:

  ```ruby
  windows_service 'chef-client' do
    action :create
    binary_path_name "C:\opscode\chef\bin"
    startup_type :disabled
  end
  ```

  Create a service with the `automatic` startup type and delayed start enabled:

  ```ruby
  windows_service 'chef-client' do
    action :create
    binary_path_name "C:\opscode\chef\bin"
    startup_type :automatic
    delayed_start true
  end
  ```

  Create a service with a description:

  ```ruby
  windows_service 'chef-client' do
    action :create
    binary_path_name "C:\opscode\chef\bin"
    startup_type :automatic
    description "Chef client as service"
  end
  ```

  **Deleting Services**

  Delete a service named chef-client:

  ```ruby
  windows_service 'chef-client' do
    action :delete
  end
  ```

  Delete a service with the `service_name` property:

  ```ruby
  windows_service 'Delete chef client' do
    action :delete
    service_name 'chef-client'
  end
  ```

  **Configuring Services**

  Change an existing service from automatic to manual startup:

  ```ruby
  windows_service 'chef-client' do
    action :configure
    binary_path_name "C:\opscode\chef\bin"
    startup_type :manual
  end
  ```