---
title: chef_client resource
resource: chef_client
aliases:
- /resource_chef_client.html
menu:
  infra:
    title: chef_client
    identifier: chef_infra/resources/chef_client chef_client
    parent: chef_infra/resources

resource_reference: true
resource_description_list:
- markdown: Use the **chef_client** resource to create clients on your Chef Infra Server from within Chef Infra cookbook code.
syntax_description: "The syntax for using the **chef_client** resource in a recipe\
  \ is as\nfollows:\n\n```ruby\nchef_client 'name' do\n  attribute 'value' # see\
  \ properties section below\n  ...\n  action :action # see actions section below\n\
  end\n```"
syntax_properties_list:
- '`chef_client` tells Chef Infra Client to use the `Chef::Provider::ChefClient` provider
  during a Chef Infra Client run'
- '`name` is the name of the resource block; when the `name` property is not specified
  as part of a recipe, `name` is also the name of the Chef Infra Client'
- '`attribute` is zero (or more) of the properties that are available for this resource'
- '`action` identifies which steps Chef Infra Client will take to bring the node into
  the desired state'
actions_list:
  :create:
    markdown: (default) Use to create a chef-client.
  :delete:
    markdown: Use to delete a chef-client.
  :nothing:
    shortcode: resources_common_actions_nothing.md
  :regenerate_keys:
    markdown: Use to regenerate the RSA public key for a chef-client.
properties_list:
- property: admin
  ruby_type: null
  required: false
  description_list:
  - markdown: Use to specify whether Chef Infra Client is an API client.
- property: chef_server
  ruby_type: null
  required: false
  description_list:
  - markdown: The URL for the Chef Infra Server.
- property: complete
  ruby_type: null
  required: false
  description_list:
  - markdown: 'Use to specify if this resource defines a chef-client completely.

      When `true`, any property not specified by this resource will be

      reset to default property values.'
- property: ignore_failure
  ruby_type: true, false
  required: false
  default_value: 'false'
  description_list:
  - markdown: Continue running a recipe if a resource fails for any reason.
- property: name
  ruby_type: null
  required: false
  description_list:
  - markdown: The name of Chef Infra Client.
- property: notifies
  ruby_type: Symbol, Chef::Resource\[String\]
  required: false
  description_list:
  - shortcode: resources_common_notification_notifies.md
  - markdown: |-
      A resource may notify another resource to take action when its state changes. Specify a 'resource[name]', the :action that resource should take, and then the :timer for that action.
      A resource may notify more than one resource; use a notifies statement for each resource to be notified.
      If the referenced resource does not exist, an error is raised. In contrast, subscribes will not fail if the source resource is not found.
      A timer specifies the point during a Chef Infra Client run at which a notification is run. The following timers are available:
  - shortcode: resources_common_notification_timers.md
  - markdown: |-
      :before
      Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.

      :delayed
      Default. Specifies that a notification should be queued up, and then executed at the end of a Chef Infra Client run.

      :immediate, :immediately
      Specifies that a notification should be run immediately, for each resource notified.

      The syntax for notifies is:

      notifies :action, 'resource[name]', :timer
  - shortcode: resources_common_notification_notifies_syntax.md
- property: output_key_format
  ruby_type: null
  required: false
  description_list:
  - markdown: 'Use to specify the format of a public key. Possible values: `pem`,
      `der`, or `openssh`. Default value: `openssh`.'
- property: output_key_path
  ruby_type: null
  required: false
  description_list:
  - markdown: 'Use to specify the path to the location in which a public key will

      be written.'
- property: raw_json
  ruby_type: null
  required: false
  description_list:
  - markdown: "Chef Infra Client as JSON data. For example:\n\n```javascript\n{\n\
      \  \"clientname\": \"client_name\",\n  \"orgname\": \"org_name\",\n  \"validator\"\
      : false,\n  \"certificate\": \"-----BEGIN CERTIFICATE-----\\n\n            \
      \      ...\n                  1234567890abcdefghijklmnopq\\n\n             \
      \     ...\n                  -----END CERTIFICATE-----\\n\",\n  \"name\": \"\
      node_name\"\n}\n```"
- property: source_key
  ruby_type: null
  required: false
  description_list:
  - markdown: 'Use to copy a public or private key, but apply a different `format`

      and `password`. Use in conjunction with `source_key_pass_phrase` and

      `source_key_path`.'
- property: source_key_pass_phrase
  ruby_type: null
  required: false
  description_list:
  - markdown: 'The pass phrase for the public key. Use in conjunction with

      `source_key` and `source_key_path`.'
- property: source_key_path
  ruby_type: null
  required: false
  description_list:
  - markdown: 'The path to the public key. Use in conjunction with `source_key` and

      `source_key_pass_phrase`.'
- property: subscribes
  ruby_type: Symbol, Chef::Resource\[String\]
  required: false
  description_list:
  - shortcode: resources_common_notification_subscribes.md
  - markdown: |-
      A resource may listen to another resource, and then take action if the state of the resource being listened to changes. Specify a 'resource[name]', the :action to be taken, and then the :timer for that action.

      Note that subscribes does not apply the specified action to the resource that it listens to - for example:

      ```ruby
      file '/etc/nginx/ssl/example.crt' do
        mode '0600'
        owner 'root'
      end

      service 'nginx' do
        subscribes :reload, 'file[/etc/nginx/ssl/example.crt]', :immediately
      end
      ```
      In this case the subscribes property reloads the nginx service whenever its certificate file, located under /etc/nginx/ssl/example.crt, is updated. subscribes does not make any changes to the certificate file itself, it merely listens for a change to the file, and executes the :reload action for its resource (in this example nginx) when a change is detected.

      If the other resource does not exist, the subscription will not raise an error. Contrast this with the stricter semantics of notifies, which will raise an error if the other resource does not exist.
  - shortcode: resources_common_notification_timers.md
  - markdown: |-
      A timer specifies the point during a Chef Infra Client run at which a notification is run. The following timers are available:

      :before
      Specifies that the action on a notified resource should be run before processing the resource block in which the notification is located.

      :delayed
      Default. Specifies that a notification should be queued up, and then executed at the end of a Chef Infra Client run.

      :immediate, :immediately
      Specifies that a notification should be run immediately, for each resource notified.
  - shortcode: resources_common_notification_subscribes_syntax.md
- property: validator
  ruby_type: null
  required: false
  description_list:
  - markdown: Use to specify if Chef Infra Client is a chef-validator.

